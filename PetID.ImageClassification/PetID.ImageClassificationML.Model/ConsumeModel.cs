// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace PetID.ImageClassificationML.Model
{
    public class ConsumeModel
    {
        private readonly PredictionEngine<ModelInput, ModelOutput> _predictionEngine;
        public ConsumeModel(string modelPath)
        {
            // Create new MLContext
            MLContext mlContext = new MLContext();
            // Load model & create prediction engine
            ITransformer mlModel = mlContext.Model.Load(modelPath, out var modelInputSchema);
            _predictionEngine = mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        // For more info on consuming ML.NET models, visit https://aka.ms/model-builder-consume
        // Method for consuming model in your app
        public ModelOutputViewModel Predict(ModelInput input, int topCount = 5)
        {
            // Use model to make prediction on input data
            ModelOutput result = _predictionEngine.Predict(input);
            var labelNames = new List<string>();
            var column = _predictionEngine.OutputSchema.GetColumnOrNull("Label");
            if (column.HasValue)
            {
                VBuffer<ReadOnlyMemory<char>> vbuffer = new VBuffer<ReadOnlyMemory<char>>();
                column.Value.GetKeyValues(ref vbuffer);

                foreach (ReadOnlyMemory<char> denseValue in vbuffer.DenseValues())
                    labelNames.Add(denseValue.ToString());
            }
            var topOutputs = result.Score.Select((s, i) => new TopOutput
            {
                Label = labelNames[i],
                Score = s
            }).OrderByDescending(o => o.Score).Take(topCount).ToList();
            return new ModelOutputViewModel
            {
                Prediction = result.Prediction,
                TopOutputs = topOutputs
            };
        }
    }
}
